"use strict";(self.webpackChunknest_commander_monorepo=self.webpackChunknest_commander_monorepo||[]).push([[97],{7942:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(959);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return a?n.createElement(f,i(i({ref:t},u),{},{components:a})):n.createElement(f,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3498:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(2081),r=a(4604),o=(a(959),a(7942)),i=["components"],l={title:"UtilityService",sidebar:"UtilityService"},s=void 0,p={unversionedId:"features/utility",id:"features/utility",title:"UtilityService",description:"As parsing booleans and numbers is a common occurrence, and the values only come in naturally as strings, nest-commander exposes a CliUtilityService to make parsing even easier and to add some extra utility. There are three methods, parseBoolean, parseInt, and parseFloat. parseInt and parseFloat are simple wrappers around the corresponding Number.parse*() method, but the parseBoolean method has a few more tricks to it.",source:"@site/docs/features/utility.md",sourceDirName:"features",slug:"/features/utility",permalink:"/docs/features/utility",draft:!1,editUrl:"https://github.com/jmcdo29/nest-commander/edit/main/apps/docs/docs/features/utility.md",tags:[],version:"current",lastUpdatedBy:"Eugen Istoc",lastUpdatedAt:1659565830,formattedLastUpdatedAt:"Aug 3, 2022",frontMatter:{title:"UtilityService",sidebar:"UtilityService"}},u={},c=[{value:"parseBoolean",id:"parseboolean",level:2},{value:"true Values",id:"true-values",level:3},{value:"false Values",id:"false-values",level:3}],m={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As parsing booleans and numbers is a common occurrence, and the values only come in naturally as strings, nest-commander exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"CliUtilityService")," to make parsing even easier and to add some extra utility. There are three methods, ",(0,o.kt)("inlineCode",{parentName:"p"},"parseBoolean"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"parseInt"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"parseFloat"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"parseInt")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"parseFloat")," are simple wrappers around the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"Number.parse*()")," method, but the ",(0,o.kt)("inlineCode",{parentName:"p"},"parseBoolean")," method has a few more tricks to it."),(0,o.kt)("h2",{id:"parseboolean"},"parseBoolean"),(0,o.kt)("p",null,"Sometimes with CLIs we want to have the simplest input as possible, and while ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," are clear, sometimes they're more than we really want to have to type out. Because of this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"CliUtilityService")," has a list of true and false values that can be accepted for a boolean input, even if it's not a boolean primitive. All inputs passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"parseBoolean")," are passed through ",(0,o.kt)("inlineCode",{parentName:"p"},"toLowerCase()")," before any comparison is made."),(0,o.kt)("h3",{id:"true-values"},"true Values"),(0,o.kt)("p",null,"Any string that matches one of the following values is considered a ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"yes"),(0,o.kt)("li",{parentName:"ul"},"y"),(0,o.kt)("li",{parentName:"ul"},"true"),(0,o.kt)("li",{parentName:"ul"},"t"),(0,o.kt)("li",{parentName:"ul"},"1")),(0,o.kt)("h3",{id:"false-values"},"false Values"),(0,o.kt)("p",null,"Any string that matches one of the following values is considered a ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"no"),(0,o.kt)("li",{parentName:"ul"},"n"),(0,o.kt)("li",{parentName:"ul"},"false"),(0,o.kt)("li",{parentName:"ul"},"f"),(0,o.kt)("li",{parentName:"ul"},"0")))}d.isMDXComponent=!0}}]);